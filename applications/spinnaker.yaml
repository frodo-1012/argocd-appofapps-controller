apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: spinnaker
spec:
  destination:
    namespace: cd
    server: https://kubernetes.default.svc
  project: cd
  source:
    chart: spinnaker
    helm:
      version: v3
      values: |-
        halyard:
          spinnakerVersion: 1.19.6
          image:
            repository: us-docker.pkg.dev/spinnaker-community/docker/halyard
            tag: 1.32.0
            pullSecrets: []
          # Set to false to disable persistence data volume for halyard
          persistence:
            enabled: true
          # Uncomment to add storage class for the persistence data volume
          # storageClass: <storageclass_name>
          # Provide additional parameters to halyard deploy apply command
          additionalInstallParameters: []
          # Provide a config map with Hal commands that will be run the core config (storage)
          # The config map should contain a script in the config.sh key
          additionalScripts:
            # If you'd rather do an inline script, set create to true and put the content in the data dict like you would a configmap
            # The content will be passed through `tpl`, so value interpolation is supported.
            create: true
            data:
              enable_ldap.sh: |-
                echo "Setting security ui/api url override"
                $HAL_COMMAND config security ui edit --override-base-url https://spinnaker.tools.k8s.11stdev.io
                $HAL_COMMAND config security api edit --override-base-url https://gate-spinnaker.tools.k8s.11stdev.io
                $HAL_COMMAND config security api edit --cors-access-pattern https://spinnaker.tools.k8s.11stdev.io
                $HAL_COMMAND config security authn oauth2 edit --provider azure --client-id "75511def-8458-4fc3-a9cf-34fb9e91d655" --client-secret "-vc~Q2kCg39q6fu6.1lA~RVj716.8r_hfJ"
                $HAL_COMMAND config security authn oauth2 edit --pre-established-redirect-uri "https://gate-spinnaker.tools.k8s.11stdev.io/login"
                $HAL_COMMAND config security authn oauth2 edit --provider other
                $HAL_COMMAND config security authn oauth2 edit --user-info-mapping-username userPrincipalName
                $HAL_COMMAND config security authn oauth2 enable
                $HAL_COMMAND config security authz edit --type file
                $HAL_COMMAND config security authz file edit --file-path /home/spinnaker/.hal/.boms/fiat/role-mappings.yml
                $HAL_COMMAND config security authz enable
              set_timezone.sh: |-
                echo "Setting time zone Asia/Seoul"
                $HAL_COMMAND config edit --timezone Asia/Seoul
          additionalSecrets:
            create: false
            data: {}
            ## Uncomment if you want to use a pre-created secret rather than feeding data in via helm.
            # name:
          additionalConfigMaps:
            create: false
            data: {}
            ## Uncomment if you want to use a pre-created ConfigMap rather than feeding data in via helm.
            # name:
          ## Define custom profiles for Spinnaker services. Read more for details:
          ## https://www.spinnaker.io/reference/halyard/custom/#custom-profiles
          ## The contents of the files will be passed through `tpl`, so value interpolation is supported.
          additionalProfileConfigMaps:
            data:
              spinnaker-local.yml:
                echo:
                  notifications:
                    slack:
                      enabled: true
                      botName: spinnaker
              echo-local.yml:
                slack:
                  enabled: true
                  token: "xoxb-27661971685-402933660947-mMhs1ZW3EzXYxmnEEZ0axYIh"
              igor-local.yml:
                locking:
                  enabled: true
                jenkins:
                  enabled: true
                  masters:
                  - address: https://jenkins.tools.k8s.11stdev.io
                    name: jenkins
                    password: 111b5710923396f0be5140824ae4a72365
                    # password: 119557595b2dc3a489eca374bb8dcfb1f4  ## new.. test
                    username: admin
              fiat-local.yml:
                fiat:
                  enabled: true
                  admin:
                    roles:
                      - ADMIN
                auth:
                  groupMembership:
                    service: file
                    file: /home/spinnaker/.hal/.boms/fiat/role-mappings.yml
              front50-local.yml:
                okHttpClient:
                  connectTimeoutMs: 600000
                  readTimeoutMs: 600000
                spinnaker:
                  s3:
                    enabled: false
                sql:
                  connectionPools:
                    default:
                      default: true
                      jdbcUrl: jdbc:mysql://k8s-tool-dev-11st.cluster-cijj2yys16uf.ap-northeast-2.rds.amazonaws.com:3306/front50?autoReconnect=true&serverTimezone=Asia/Seoul
                      password: '!fro.xkah5#'
                      user: front50_service
                  enabled: true
                  migration:
                    jdbcUrl: jdbc:mysql://k8s-tool-dev-11st.cluster-cijj2yys16uf.ap-northeast-2.rds.amazonaws.com:3306/front50?autoReconnect=true&serverTimezone=Asia/Seoul
                    password: '!fro.xkah5#'
                    user: front50_migrate
              gate-local.yml:
                okHttpClient:
                  connectTimeoutMs: 600000
                  readTimeoutMs: 600000
                server:
                  tomcat:
                    httpsServerPort: X-Forwarded-Port
                    internalProxies: .*
                    protocolHeader: X-Forwarded-Proto
                    remoteIpHeader: X-Forwarded-For
              orca-local.yml:
                okHttpClient:
                  connectTimeoutMs: 600000
                  readTimeoutMs: 600000
                task:
                  daysOfExecutionHistory: 180
                executionRepository:
                  redis:
                    enabled: false
                  sql:
                    enabled: true
                monitor:
                  activeExecutions:
                    redis: false
                sql:
                  connectionPool:
                    connectionTimeout: 5000
                    jdbcUrl: jdbc:mysql://k8s-tool-dev-11st.cluster-cijj2yys16uf.ap-northeast-2.rds.amazonaws.com:3306/orca?autoReconnect=true&serverTimezone=Asia/Seoul
                    maxLifetime: 30000
                    password: '!orc.qdtu1#'
                    user: orca_service
                  enabled: true
                  migration:
                    jdbcUrl: jdbc:mysql://k8s-tool-dev-11st.cluster-cijj2yys16uf.ap-northeast-2.rds.amazonaws.com:3306/orca?autoReconnect=true&serverTimezone=Asia/Seoul
                    password: '!orc.qdtu1#'
                    user: orca_migrate
                keiko:
                  queue:
                    sql:
                      enabled: true
                    redis:
                      enabled: false
                queue:
                  zombieCheck:
                    enabled: true
                  pendingExecutionService:
                    sql:
                      enabled: true
                    redis:
                      enabled: false
              rosco-local.yml:
                okHttpClient:
                  connectTimeoutMs: 600000
                  readTimeoutMs: 600000

          ## Define custom settings for Spinnaker services. Read more for details:
          ## https://www.spinnaker.io/reference/halyard/custom/#custom-service-settings
          ## You can use it to add annotations for pods, override the image, etc.
          additionalServiceSettings:
            gate.yml:
              env:
                azureTenantId: 06d58de8-c080-4944-9687-acd5b7390ca0
            deck.yml:
            #   artifactId: gcr.io/spinnaker-marketplace/deck:2.9.0-20190412012808
              kubernetes:
                podAnnotations:
                  iam.amazonaws.com/role: 11st-tool-spinnaker
            clouddriver.yml:
              kubernetes:
                podAnnotations:
                  iam.amazonaws.com/role: 11st-tool-spinnaker

          ## Populate to provide a custom local BOM for Halyard to use for deployment. Read more for details:
          ## https://www.spinnaker.io/guides/operator/custom-boms/#boms-and-configuration-on-your-filesystem
          bom: ~
          #   artifactSources:
          #     debianRepository: https://dl.bintray.com/spinnaker-releases/debians
          #     dockerRegistry: gcr.io/spinnaker-marketplace
          #     gitPrefix: https://github.com/spinnaker
          #     googleImageProject: marketplace-spinnaker-release
          #   services:
          #     clouddriver:
          #       commit: 031bcec52d6c3eb447095df4251b9d7516ed74f5
          #       version: 6.3.0-20190904130744
          #     deck:
          #       commit: b0aac478e13a7f9642d4d39479f649dd2ef52a5a
          #       version: 2.12.0-20190916141821
          #     ...
          #   timestamp: '2019-09-16 18:18:44'
          #   version: 1.16.1

          ## Define local configuration for Spinnaker services.
          ## The contents of these files would be copies of the configuration normally retrieved from
          ## `gs://halconfig/<service-name>`, but instead need to be available locally on the halyard pod to facilitate
          ## offline installation. This would typically be used along with a custom `bom:` with the `local:` prefix on a
          ## service version.
          ## Read more for details:
          ## https://www.spinnaker.io/guides/operator/custom-boms/#boms-and-configuration-on-your-filesystem
          ## The key for each entry must be the name of the service and a file name separated by the '_' character.
          serviceConfigs:
            fiat_role-mappings.yml: |-
              users:
                - username: kmdhyun@11stcorp.com
                  roles:
                  - ADMIN
                - username: muyoul.lee@11stcorp.com
                  roles:
                  - ADMIN
                - username: ys1012.lee@11stcorp.com
                  roles:
                  - ADMIN
                - username: casper.park@11stcorp.com
                  roles:
                  - ADMIN
                - username: myhs2002@11stcorp.com
                  roles:
                  - ADMIN
                - username: jomer@11stcorp.com
                  roles:
                  - ADMIN
                - username: 11st.PP58451@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: khmoon@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: jhparkPP93114@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: jhlee87@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: 11st.PP54622@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: 11st.PP79591@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: dy920@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: quftoa@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: 11st.PP59310@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: shinji0711@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: 11st.PP84933@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: hjyoon@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: 11st.PP83652@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: 11st.PP74862@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: 11st.PP74122@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: 11st.PP79498@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: smohPP93120@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: hjlim90@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: khnam91@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: 11st.PP75033@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: 11st.PP85031@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: hjpark97@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: jheun@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: hwlee1@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: yhkim11@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: jychoi96@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: ejchoi98@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: khkim2@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: yongho11@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: young6087@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: nam1988@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: minseok.jeon@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: ixiang@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: cyoons@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: hjchoi@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: hagalaz@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: sonkokou@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: smshim@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: ehlee@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: dolim@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: 11st.PP01967@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: eunjin2@11stcorp.com
                  roles:
                  - BO_DEPLOY
                - username: dahoon.jeong@11stcorp.com
                  roles:
                  - BO_DEPLOY
                  
          # clouddriver_clouddriver-rw.yml: |-
          #   ...
          # clouddriver_clouddriver.yml: |-
          #   ...
          # deck_settings.json: |-
          #   ...
          # echo_echo.yml: |-
          #   ...

          ## Uncomment if you want to add extra commands to the init script
          ## run by the init container before halyard is started.
          ## The content will be passed through `tpl`, so value interpolation is supported.
          # additionalInitScript: |-

          ## Uncomment if you want to add annotations on halyard and install-using-hal pods
          annotations:
            iam.amazonaws.com/role: 11st-tool-spinnaker

          ## Uncomment the following resources definitions to control the cpu and memory
          # resources allocated for the halyard pod
          resources:
            requests:
              memory: "2Gi"
              cpu: "2000m"
            limits:
              memory: "2Gi"
              cpu: "2000m"

          ## Uncomment if you want to set environment variables on the Halyard pod.
          #env:
          #- name: AWS_ACCESS_KEY_ID
          #  valueFrom:
          #    secretKeyRef:
          #      name: spinnaker-aws
          #      key: accessKeyId
          #- name: AWS_SECRET_ACCESS_KEY
          #  valueFrom:
          #    secretKeyRef:
          #      name: spinnaker-aws
          #      key: secretAccessKey

          customCerts:
            ## Enable to override the default cacerts with your own one
            enabled: false
            secretName: custom-cacerts

        # Define which registries and repositories you want available in your
        # Spinnaker pipeline definitions
        # For more info visit:
        #   https://www.spinnaker.io/setup/providers/docker-registry/

        # Configure your Docker registries here
        dockerRegistries:
        - name: dockerhub
          address: index.docker.io
          repositories:
            - library/alpine
            - library/ubuntu
            - library/centos
            - library/nginx
        # - name: gcr
        #   address: https://gcr.io
        #   username: _json_key
        #   password: '<INSERT YOUR SERVICE ACCOUNT JSON HERE>'
        #   email: 1234@5678.com
        # - name: ecr
        #   address: <AWS-ACCOUNT-ID>.dkr.ecr.<REGION>.amazonaws.com
        #   username: AWS
        #   passwordCommand: aws --region <REGION> ecr get-authorization-token --output text --query 'authorizationData[].authorizationToken' | base64 -d | sed 's/^AWS://'

        # If you don't want to put your passwords into a values file
        # you can use a pre-created secret instead of putting passwords
        # (specify secret name in below `dockerRegistryAccountSecret`)
        # per account above with data in the format:
        # <name>: <password>

        # dockerRegistryAccountSecret: myregistry-secrets

        kubeConfig:
          # Use this when you want to register arbitrary clusters with Spinnaker
          # Upload your ~/kube/.config to a secret
          enabled: true
          secretName: 11st-kubeconfig
          secretKey: config
          # Use this when you want to configure halyard to reference a kubeconfig from s3
          # This allows you to keep your kubeconfig in an encrypted s3 bucket
          # For more info visit:
          #   https://www.spinnaker.io/reference/halyard/secrets/s3-secrets/#secrets-in-s3
          # encryptedKubeconfig: encrypted:s3!r:us-west-2!b:mybucket!f:mykubeconfig
          # List of contexts from the kubeconfig to make available to Spinnaker
          contexts:
          - 11st-tool-v1
          - 11st-dev-v1
          - 11st-alpha-v1
          - 11st-prod-v1
          - dev-tool
          - dev-api
          - alp-api
          - prod-ui
          - prod-tool
          - prod-api
          deploymentContext: 11st-tool-v1
          # Use this to limit the namespaces this kubernetes account will access.
          # Note, if you use nameSpaces, omittedNameSpaces will not be used.
          # Note, the casing of the nameSpace variable here.
          # nameSpaces:
          # - namespace1
          # - namespace2
          omittedNameSpaces:
          - kube-system
          - kube-public
          onlySpinnakerManaged:
            enabled: false

          # When false, clouddriver will skip the permission checks for all kubernetes kinds at startup.
          # This can save a great deal of time during clouddriver startup when you have many kubernetes
          # accounts configured. This disables the log messages at startup about missing permissions.
          checkPermissionsOnStartup: true

          # A list of resource kinds this Spinnaker account can deploy to and will cache.
          # When no kinds are configured, this defaults to ‘all kinds'.
          # kinds:
          # -

          # A list of resource kinds this Spinnaker account cannot deploy to or cache.
          # This can only be set when –kinds is empty or not set.
          # omittedKinds:
          # -

          # When true, clouddriver will query manifest status during pipeline executions using live
          # data rather than the cache. This eliminates all time spent in the “force cache refresh”
          # task in pipelines, greatly reducing execution time.
          liveManifestCalls: true

        # Change this if youd like to expose Spinnaker outside the cluster
        ingress:
          enabled: true
          host: spinnaker.tools.k8s.11stdev.io
          # annotations:
            # ingress.kubernetes.io/ssl-redirect: 'true'
            # kubernetes.io/ingress.class: nginx
            # kubernetes.io/tls-acme: "true"
          # tls:
          #  - secretName: -tls
          #    hosts:
          #      - domain.com

        ingressGate:
          enabled: true
          host: gate-spinnaker.tools.k8s.11stdev.io
          annotations:
            ingress.kubernetes.io/ssl-redirect: 'true'
            # kubernetes.io/ingress.class: nginx
            # kubernetes.io/tls-acme: "true"
          # tls:
          #  - secretName: -tls
          #    hosts:
          #      - domain.com

        # spinnakerFeatureFlags is a list of Spinnaker feature flags to enable
        # Ref: https://www.spinnaker.io/reference/halyard/commands/#hal-config-features-edit
        # spinnakerFeatureFlags:
        #   - artifacts
        #   - pipeline-templates
        spinnakerFeatureFlags:
          - artifacts

        # Node labels for pod assignment
        # Ref: https://kubernetes.io/docs/user-guide/node-selection/
        # nodeSelector to provide to each of the Spinnaker components
        nodeSelector: {}

        # Node tolerations
        # Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
        tolerations: []

        # Redis password to use for the in-cluster redis service
        # Enable redis to use in-cluster redis
        redis:
          enabled: true
          # External Redis option will be enabled if in-cluster redis is disabled
          external:
            host: "<EXTERNAL-REDIS-HOST-NAME>"
            port: 6379
            # password: ""
          password: password
          nodeSelector: {}
          cluster:
            enabled: false
          configmap: |-
            # Config : https://raw.githubusercontent.com/redis/redis/6.0/redis.conf
            # Enable AOF https://redis.io/topics/persistence#append-only-file
            appendonly no
            # no-appendfsync-on-rewrite yes
            # auto-aof-rewrite-percentage 50
            # auto-aof-rewrite-min-size 671088640

          master:
            resources:
              requests:
                memory: 4Gi
                cpu: 1000m
            configmap:
            ## Redis additional command line flags
            ##
            ## Can be used to specify command line flags, for example:
            ##
              # extraFlags:
              # - "--maxmemory-policy volatile-ttl"
              # - "--repl-backlog-size 1024mb"
            persistence:
              enabled: true
              # storageClass: "gp2"
              size: 8Gi
          # Uncomment if you don't want to create a PVC for redis
          #  master:
          #    persistence:
          #      enabled: false
          ## Sysctl InitContainer
          ## used to perform sysctl operation to modify Kernel settings (needed sometimes to avoid warnings)
          # sysctlImage:
          #   enabled: true
          #   command: ["sh", "-c", "echo never >/host-sys/kernel/mm/transparent_hugepage/enabled"]
          #   registry: docker.io
          #   repository: bitnami/minideb
          #   tag: buster
          #   pullPolicy: Always
          #   ## Optionally specify an array of imagePullSecrets.
          #   ## Secrets must be manually created in the namespace.
          #   ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
          #   ##
          #   # pullSecrets:
          #   #   - myRegistryKeySecretName
          #   mountHostSys: true
          #   resources: {}
            # resources:
            #   requests:
            #     memory: 128Mi
            #     cpu: 100m

        # Minio access/secret keys for the in-cluster S3 usage
        # Minio is not exposed publically
        minio:
          enabled: false
          image:
            tag: RELEASE.2020-01-03T19-12-21Z
          service:
            type: ClusterIP
          accessKey: spinnakeradmin
          secretKey: spinnakeradmin
          defaultBucket:
            enabled: true
            name: "spinnaker"
          nodeSelector: {}
        # Uncomment if you don't want to create a PVC for minio
        #  persistence:
        #    enabled: false

        # Google Cloud Storage
        gcs:
          enabled: false
          project: my-project-name
          bucket: "<GCS-BUCKET-NAME>"
          ## if jsonKey is set, will create a secret containing it
          jsonKey: '<INSERT CLOUD STORAGE JSON HERE>'
          ## override the name of the secret to use for jsonKey, if `jsonKey`
          ## is empty, it will not create a secret assuming you are creating one
          ## external to the chart. the key for that secret should be `key.json`.
          secretName:

        # AWS Simple Storage Service
        s3:
          enabled: true
          bucket: 11st-spinnaker
          # rootFolder: "front50"
          # region: "us-east-1"
          # endpoint: ""
          # accessKey: AKIAWQB5BL3EORE436AM
          # secretKey: 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
          # assumeRole: "<role to assume>"
          ## Here you can pass extra arguments to configure s3 storage options
          extraArgs: []
          #  - "--path-style-access true"

        # Azure Storage Account
        azs:
          enabled: false
        #   storageAccountName: ""
        #   accessKey: ""
        #   containerName: "spinnaker"

        rbac:
          # Specifies whether RBAC resources should be created
          create: true
          # Specifies whether PSP resources should be created
          pspEnabled: false

        serviceAccount:
          # Specifies whether a ServiceAccount should be created
          create: true
          # The name of the ServiceAccounts to use.
          # If left blank it is auto-generated from the fullname of the release
          halyardName:
          spinnakerName:
          serviceAccountAnnotations: {}
        securityContext:
          # Specifies permissions to write for user/group
          runAsUser: 1000
          fsGroup: 1000
    repoURL: https://charts.helm.sh/stable
    targetRevision: 2.2.3
